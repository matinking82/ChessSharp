@page "/"
@using ChessKing.Models
@using System.Threading
@using ChessazorMaui.Services
@inject LogServices _logServices;

<PageTitle>Chessazor</PageTitle>
@if (promotingPgn != "")
{
    <div class="row promote-selector p-3 bg-secondary rounded-2">
        <h3 class="col-12">Select a piece to promote:</h3>
        <div class="col-3">
            <img class="img-thumbnail" src="pieces/@(board.WhitesTurn ? "2" : "8").png" @onclick="() => { promoteClicked('N'); }" />
        </div>
        <div class="col-3">
            <img class="img-thumbnail" src="pieces/@(board.WhitesTurn ? "3" : "9").png" @onclick="() => {promoteClicked('B');}" />
        </div>
        <div class="col-3">
            <img class="img-thumbnail" src="pieces/@(board.WhitesTurn ? "4" : "10").png" @onclick="() => {promoteClicked('R');}" />
        </div>
        <div class="col-3">
            <img class="img-thumbnail" src="pieces/@(board.WhitesTurn ? "5" : "11").png" @onclick="() => {promoteClicked('Q');}" />
        </div>
    </div>
}

@if (Winner != null)
{
    <div class="blur-page">
        <div class="container mt-5">
            <div class="row mt-5">
                <div class="col-3 mt-5"></div>
                <h1 class="text-white col-6">@(Winner.Value ? "White" : "Black") Is Winner!!</h1>
                <div class="col-3"></div>
                <div class="col-3"></div>
                <button class="btn btn-primary col-6" @onclick="btnGotItClicked">Got it</button>
                <div class="col-3"></div>
            </div>
        </div>
    </div>
}

<div class="alert d-flex align-content-center justify-content-center p-1 mx-2">
    <span class="timer-timer p-3">00:@blackTime</span>
</div>
<div class="grid-board row" id="Board">
    @{
        bool check = false;
        List<string> classes = new List<string>();
    }
    @for (int i = 8; i > 0; i--)
    {
        foreach (var file in Board.FileNames)
        {
            classes = new() { "ChessSquare" };
            var name = $"{file}{i}";
            var piece = board[name];

            @if (check)
            {
                classes.Add("SquareColor2");
            }
            else
            {
                classes.Add("SquareColor1");
            }

            if (piece.PieceId != null)
            {
                classes.Add("ChessSquareFull");
            }

            @if (name == StartSquare)
            {
                classes.Add("SquareSelected");
            }
            string style = "";
            if (AllowedSquares.Contains(name))
            {
                classes.Add("AllowedSquare");
                Random random = new Random();
                style = $"background-color:rgb({random.Next(0, 255)},{random.Next(0, 255)},{random.Next(0, 255)})!important";
            }

            <div style="@style" @onclick="() => { if(piece.PieceId!=null||AllowedSquares.Contains(name)) SquareSelect(name); }" class="@(classes.Aggregate((a,b)=>a+" "+b+" "))">
                @if (piece.PieceId != null)
                {
                    <img src="pieces/@(Board.Pieces.IndexOf(piece.PieceName)+1).png" />
                }
            </div>

            check = !check;
        }
        check = !check;
    }
</div>
<div class="alert d-flex align-content-center justify-content-center p-1 mx-2">
    <span class="timer-timer p-3">00:@whiteTime</span>
</div>

<div class="row board-controlls">
    <button @onclick="undo" class="col-6 btn btn-outline-warning">Undo</button>
    <button @onclick="redo" class="col-6 btn btn-outline-primary">Redo</button>
    <button @onclick="restart" class="col-12 btn btn-outline-danger">Restart</button>
    <button @onclick="export" class="col-12 btn btn-success">Export</button>
</div>

<div class="alert alert-info moves-tree">
    <div class="alert-heading">
        PGN:
    </div>
    <MovesButton node="board.Moves.Root" board="board" move="0" white="false" update="update"></MovesButton>

</div>

<div class="alert alert-warning moves-tree">
    <div class="alert-heading">
        FEN:
    </div>
    <input class="form-control" value="@board.Moves.GetActiveFen()" />
</div>

<div class="alert alert-dark text-white bg-dark set-width">
    <div class="alert-heading">
        Destroyed Pieces:
    </div>

    <span>
        @destroyedPiecesText
    </span>
</div>

@code
{
    Board board = new Board();

    public static int blackTime = 0;
    public static int whiteTime = 0;
    List<string> AllowedSquares = new List<string>();

    Timer timer;
    string StartSquare = "";
    bool isGameOn = true;
    bool? Winner = null;
    string promotingPgn = "";
    string destroyedPiecesText = "";
    void SquareSelect(string name)
    {
        if (promotingPgn != "" || !isGameOn)
        {
            return;
        }

        var square = board[name];

        if (string.IsNullOrEmpty(StartSquare))
        {
            if (board.IsWhitePiece(square) != board.WhitesTurn)
            {
                return;
            }
            AllowedSquares = board.AvailableSquares(name);
            StartSquare = name;
        }
        else
        {
            var stsquare = board[StartSquare];
            if (name == StartSquare)
            {
                StartSquare = "";
                AllowedSquares = new();
            }
            else
            {
                if (AllowedSquares.Contains(name))
                {
                    string pgnmove = "";
                    if (stsquare.PieceName == "P" || stsquare.PieceName == "p")
                    {
                        pgnmove = name;
                        if (StartSquare.ElementAt(0) != name.ElementAt(0))
                        {
                            pgnmove = StartSquare.Substring(0, 1) + pgnmove;
                        }

                        if (name.ElementAt(1) == '1' || name.ElementAt(1) == '8')
                        {
                            promotingPgn = pgnmove;
                            return;
                        }
                    }
                    else
                    {
                        pgnmove = $"{stsquare.PieceName.ToUpper()}{StartSquare}{name}";
                    }

                    bool turn = board.WhitesTurn;
                    var status = board.Move(pgnmove);
                    if (status)
                    {
                        StartSquare = "";
                        AllowedSquares = new();
                        if (turn)
                        {
                            whiteTime = 30;
                        }
                        else
                        {
                            blackTime = 30;
                        }
                        checkWin();
                        updateDestroyedPieces();
                    }
                }
                else if (board.IsWhitePiece(square) == board.WhitesTurn)
                {
                    AllowedSquares = board.AvailableSquares(name);
                    StartSquare = name;
                    return;
                }
            }
        }
    }

    async void update()
    {
        AllowedSquares = new List<string>();
        StartSquare = "";
        StateHasChanged();
    }

    void restart()
    {
        board = new Board();
        StartSquare = "";
        AllowedSquares = new List<string>();
        Winner = null;
        isGameOn = true;
        promotingPgn = "";
        destroyedPiecesText = "";
        whiteTime = 30;
        blackTime = 30;
        StateHasChanged();
    }

    void undo()
    {
        board.UndoMove();
        AllowedSquares = new List<string>();
        StartSquare = "";
        whiteTime = 30;
        blackTime = 30;
        StateHasChanged();
    }

    void redo()
    {
        board.RedoMove();
        AllowedSquares = new List<string>();
        StartSquare = "";
        whiteTime = 30;
        blackTime = 30;
        StateHasChanged();
    }

    void TimerEverySecond(object? obj)
    {
        if (!isGameOn)
        {
            return;
        }

        if (board.WhitesTurn)
        {
            whiteTime--;
        }
        else
        {
            blackTime--;
        }

        if (whiteTime <= 0)
        {
            Win(false);
        }

        if (blackTime <= 0)
        {
            Win(true);
        }

        InvokeAsync(StateHasChanged);
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        blackTime = 30;
        whiteTime = 30;
        timer = new Timer(TimerEverySecond, null, 0, 1000);
    }


    void Win(bool IsWhite)
    {
        isGameOn = false;
        Winner = IsWhite;
    }

    void checkWin()
    {
        var status = board.Status();

        switch (status)
        {
            case GameStatus.BlackMate:
                Win(false);
                break;

            case GameStatus.WhiteMate:
                Win(true);
                break;

            case GameStatus.StaleMate:
                isGameOn = false;
                break;

            default:
                break;
        }
    }

    void updateDestroyedPieces()
    {
        var pieces = board.GetPiecesCount();
        string res = "White: ";

        if (8 - pieces.WhitePawn != 0)
        {
            res += "Pawn x" + (8 - pieces.WhitePawn) + " ";
        }

        if (2 - pieces.WhiteKnight != 0)
        {
            res += "Knight x" + (2 - pieces.WhiteKnight) + " ";
        }

        if (2 - pieces.WhiteBishop != 0)
        {
            res += "Bishop x" + (2 - pieces.WhiteBishop) + " ";
        }

        if (2 - pieces.WhiteRook != 0)
        {
            res += "Rook x" + (2 - pieces.WhiteRook) + " ";
        }

        if (1 - pieces.WhiteQueen != 0)
        {
            res += "Queen x" + (2 - pieces.WhiteQueen) + " ";
        }

        res += "\nBlack: ";

        if (8 - pieces.BlackPawn != 0)
        {
            res += "Pawn x" + (8 - pieces.BlackPawn) + " ";
        }

        if (2 - pieces.WhiteKnight != 0)
        {
            res += "Knight x" + (2 - pieces.BlackKnight) + " ";
        }

        if (2 - pieces.WhiteBishop != 0)
        {
            res += "Bishop x" + (2 - pieces.BlackBishop) + " ";
        }

        if (2 - pieces.WhiteRook != 0)
        {
            res += "Rook x" + (2 - pieces.BlackRook) + " ";
        }

        if (1 - pieces.WhiteQueen != 0)
        {
            res += "Queen x" + (2 - pieces.BlackQueen) + " ";
        }


        destroyedPiecesText = res;
    }

    void promoteClicked(char piece)
    {
        if (promotingPgn == "")
        {
            return;
        }

        string move = promotingPgn + $"={piece}";
        promotingPgn = "";
        bool turn = board.WhitesTurn;
        var status = board.Move(move);
        if (status)
        {
            StartSquare = "";
            AllowedSquares = new();
            if (turn)
            {
                whiteTime = 30;
            }
            else
            {
                blackTime = 30;
            }
            checkWin();
        }
    }

    void btnGotItClicked()
    {
        Winner = null;
    }

    async void export()
    {
        string pgn = board.GetPgn();

        await _logServices.SaveLog(pgn);
    }
}
